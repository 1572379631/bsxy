<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
       	http://www.springframework.org/schema/aop 
	  	http://www.springframework.org/schema/aop/spring-aop.xsd
	  	http://www.springframework.org/schema/tx
      	http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 读取properties配置文件 -->
	<bean id="propertiesLoad" 
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:log4j.properties" />
	</bean>
	

	<!-- 配置数据源对象 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- 注入数据库连接池需要的属性信息 -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mysql://localhost:3306/bsxyespace?characterEncoding=utf8"></property>
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>

		<property name="maxActive" value="20"></property>
		<property name="initialSize" value="5"></property>
	</bean>

	<!-- 实例化SqlSessionFactory -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--给sessionFactory注入数据源对象 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载mybatis的主配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
	</bean>
	
	<!--
		spring对象mybaits进行管理 ：实例化Dao对象 实例化一个mapper接口扫描对象 会自动扫描basePackage包和子包下的所有Mapper接口，为Mapper接口生成代理对象 
		（代理被放入spring的容器），代理对象的id属性的值为 mapper接口名的第一个字母小写 要求： mapper接口和mapper文件，建议放入同一个目录，名字相同 
		如果有多个Mapper包，用逗号隔开
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.gzsxt.mapper"></property>
		<property name="sqlSessionFactory" ref="sessionFactory"></property>
	</bean>
	
	 <!-- 实例化事务管理器对象 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<!-- 给事务管理器，注入数据源对象 -->
	 	<property name="dataSource" ref="dataSource"></property>
	 </bean>

	<!-- 配置声明式事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="login" read-only="true" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置切入点 PointCut -->
	<aop:config>
		<aop:pointcut expression="execution (* cn.gzsxt.service.*.* (..))"
			id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>

</beans>
